[33mcommit 133bbfb9feb7e856b48e2d426a7b455a61c358cb[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmain[m[33m, [m[1;31morigin/main[m[33m)[m
Author: blesswrld <roninfortnite71@gmail.com>
Date:   Mon Aug 11 13:14:27 2025 +0300

    fix(frontend): resolve layout shifts and text overflow issues
    
    This commit addresses several UI/UX bugs related to layout consistency and adaptability across different screen sizes and content lengths.
    
    1.  **Dashboard Layout Refactoring:**
        -   Refactored the project list item on the main dashboard (`/dashboard`) to use a more robust flexbox layout.
        -   It now correctly handles different content lengths and maintains alignment for status indicators and action menus.
    
    2.  **Project Details Page (`/project/[id]`) Enhancements:**
        -   Replaced a problematic grid layout with a simpler, more predictable two-row flex column layout for deployment list items on mobile devices, fixing alignment and overflow issues.
        -   Applied the `truncate` utility class to long commit messages to prevent them from breaking the layout. A `title` attribute was added to show the full message on hover.
        -   Added the `min-w-0` class to the flex container to ensure the `truncate` utility works correctly within a flex context.
    
    3.  **Hydration Error Fix:**
        -   Resolved a React hydration error by adding the `suppressHydrationWarning` attribute to the `<html>` tag in the root layout. This silences warnings caused by server/client mismatches in class names, which is expected behavior when using theme providers like `next-themes`.

[33mcommit c419571e5a25180fb0e7fb2d88b0c87955d654b5[m
Author: blesswrld <roninfortnite71@gmail.com>
Date:   Mon Aug 11 12:15:05 2025 +0300

    refactor(statuses): implement robust backend data aggregation
    
    This major refactoring addresses the issue of desynchronized deployment and CI statuses by moving data aggregation logic from the frontend to the backend. It ensures that the CI status displayed always corresponds to the specific commit of the Vercel deployment.
    
    1.  Backend Logic Overhaul (\ProjectsService\ & \IntegrationsService\):
    -   The \GET /projects\ endpoint now acts as the single source of truth for the dashboard, orchestrating calls to external services.
    -   \ProjectsService.findAll\ now fetches the latest Vercel deployment, extracts its \commitSha\, and uses this specific SHA to query GitHub for the correct check run status.
    -   \IntegrationsService.getGithubChecks\ was enhanced to accept an optional \commitSha\. It now uses the more reliable \/commits/{sha}/status\ API endpoint and handles the \409 Conflict\ state for newly pushed commits.
    -   Unused API endpoints (\GET /integrations/github/checks/:projectId\ and others) were removed from the controller to clean up the API surface.
    
    2.  Frontend Simplification (\DashboardPage\):
    -   The dashboard now relies on a single \useSWR\ hook to fetch all aggregated project data.
    -   State management with \useEffect\ and multiple \useState\ hooks for project data was completely removed in favor of SWR's caching and revalidation.
    -   Child components (\GithubChecksStatus\, \DashboardDeploymentStatus\) were refactored into 'dumb' components that only receive and display data via props, removing all internal data-fetching logic.
    
    3.  UI & UX Enhancements (\DeploymentListItem\):
    -   Introduced logic to show a project's full commit history from GitHub on the project details page (\/project/[id]\), rather than just its deployment history from Vercel. This provides a more complete view of project activity.
    -   Fixed a layout issue where deployment statuses were misaligned by enforcing a fixed width on the actions container.
    -   The accordion trigger for 'Not Deployed' commits is now disabled and the chevron icon is hidden to prevent users from attempting to view non-existent logs.

[33mcommit cf35816f852839d00f1fc5e69d794da0d5cf9ef5[m
Merge: 0678bf7 f8719a1
Author: blesswrld <roninfortnite71@gmail.com>
Date:   Mon Aug 11 12:08:23 2025 +0300

    Merge remote-tracking branch 'origin/main'

[33mcommit 0678bf7b86042d660248fc8a37d0526be82e62bb[m
Author: blesswrld <roninfortnite71@gmail.com>
Date:   Mon Aug 11 09:28:36 2025 +0300

    refactor(statuses): implement robust backend data aggregation
    
    This major refactoring addresses the issue of desynchronized deployment and CI statuses by moving data aggregation logic from the frontend to the backend. It ensures that the CI status displayed always corresponds to the specific commit of the Vercel deployment.
    
    1.  **Backend Logic Overhaul (`ProjectsService` & `IntegrationsService`):**
        -   The `GET /projects` endpoint now acts as the single source of truth for the dashboard, orchestrating calls to external services.
        -   `ProjectsService.findAll` now fetches the latest Vercel deployment, extracts its `commitSha`, and uses this specific SHA to query GitHub for the correct check run status.
        -   `IntegrationsService.getGithubChecks` was enhanced to accept an optional `commitSha`. It now uses the more reliable `/commits/{sha}/status` API endpoint and handles the `409 Conflict` state for newly pushed commits.
        -   Unused API endpoints (`GET /integrations/github/checks/:projectId` and others) were removed from the controller to clean up the API surface.
    
    2.  **Frontend Simplification (`DashboardPage`):**
        -   The dashboard now relies on a single `useSWR` hook to fetch all aggregated project data.
        -   State management with `useEffect` and multiple `useState` hooks for project data was completely removed in favor of SWR's caching and revalidation.
        -   Child components (`GithubChecksStatus`, `DashboardDeploymentStatus`) were refactored into "dumb" components that only receive and display data via props, removing all internal data-fetching logic.
    
    3.  **UI & UX Enhancements (`DeploymentListItem`):**
        -   Introduced logic to show a project's full commit history from GitHub on the project details page (`/project/[id]`), rather than just its deployment history from Vercel. This provides a more complete view of project activity.
        -   Fixed a layout issue where deployment statuses were misaligned by enforcing a fixed width on the actions container.
        -   The accordion trigger for "Not Deployed" commits is now disabled and the chevron icon is hidden to prevent users from attempting to view non-existent logs.

[33mcommit f8719a1d434d75a9982c50c4c7d9133c5f3ea235[m
Author: blesswrld <roninfortnite71@gmail.com>
Date:   Mon Aug 11 09:28:36 2025 +0300

    refactor(deployments): implement robust controls for deployment actions

[33mcommit f358a2feebc18f2a0d2066e3613fccb06eaf67d4[m
Author: blesswrld <roninfortnite71@gmail.com>
Date:   Mon Aug 11 08:18:30 2025 +0300

    refactor(auth): configure token expiration and handle 401 errors
    
    1.  Updated JWT expiresIn option from '1d' to '7d' in the AuthModule to provide a more convenient session duration for users.
    
    2.  Fixed a race condition on the client-side where API calls were made before the auth token was loaded from localStorage. Implemented a check against isAuthLoading from AuthContext to prevent premature requests.
    
    3.  Re-enabled the global 401 error handling in the useApi hook. It now correctly logs out the user by clearing the token and reloading the application when a session truly expires.

[33mcommit 0f169cfcc203ce35e42034f42c8176968733ce86[m
Author: blesswrld <roninfortnite71@gmail.com>
Date:   Mon Aug 11 07:53:11 2025 +0300

    fix many errors, add some new toast and etc.

[33mcommit ec98ef49e8871b2abad3802773eaef34b8fc42bb[m
Author: blesswrld <roninfortnite71@gmail.com>
Date:   Sun Aug 10 16:24:50 2025 +0300

    fix(auth): Prevent logout on Vercel API errors
    Refactor API error handling to distinguish between session-ending authentication errors (401) and recoverable authorization/integration errors (403).
    
    Previously, any 4xx error from an integration check (e.g., Vercel rate limit or unconnected account) would be bubbled up as a 401 from our backend, causing the global `useApi` hook to trigger a full-page reload and logout.
    
    This commit introduces the following changes:
    
    1.  **Backend (`integrations.service.ts`):**
        -   Modified `getVercelProjects` to throw a `403 ForbiddenException` for integration-specific issues like a missing Vercel token, rate limiting, or an invalid token.
        -   `401 UnauthorizedException` is now reserved for actual user authentication failures.
    
    2.  **Frontend (`useApi.ts`):**
        -   Updated the main API hook to only trigger a global logout (`setToken(null)` and `window.location.reload()`) strictly on `401 Unauthorized` status codes.
        -   Other error codes, like `403 Forbidden`, are now correctly propagated as exceptions to be handled by the calling component.
    
    3.  **Frontend (`ImportVercelDialog.tsx`):**
        -   The component now correctly catches the `403 ForbiddenException` and displays an informative `toast` notification to the user, prompting them to connect their Vercel account in settings, instead of causing a logout.
    
    This resolves a major UX issue where users were being logged out due to transient or configuration-related API errors. The login and session expiration flow remains secure, while integration error handling is now more robust and user-friendly.

[33mcommit 3973ad4ce214f84c80d03235639f9fdab52e1ffd[m
Author: blesswrld <roninfortnite71@gmail.com>
Date:   Sun Aug 10 02:33:15 2025 +0300

    feat(api, web): implement profile management and Vercel project import
    
    This commit introduces a full-featured user profile page and a seamless project import workflow, significantly enhancing user management and onboarding.
    
    Key changes include:
    
    1.  Profile Management (Backend):
        - Extended the User model in schema.prisma with
    ame and vatarUrl fields.
        - Implemented a secure PATCH /users/me/password endpoint for changing passwords, including current password verification.
        - Added a PATCH /users/me endpoint to update user profile information (name, avatar).
        - Created a new POST /integrations/avatars/upload-url endpoint that generates a secure signed URL for direct-to-storage uploads.
        - Implemented a SupabaseService and module for managing file storage interactions.
    
    2.  Profile Management (Frontend):
        - Redesigned the /profile page to display user avatar and name, with a professional skeleton loader.
        - Refactored the 'Change Password' functionality into its own modal dialog (ChangePasswordDialog).
        - Created an EditProfileDialog for updating user name and uploading a new avatar.
        - Implemented a complete client-side avatar upload flow:
            1.  Request a signed URL from the backend.
            2.  Upload the file directly to Supabase Storage.
            3.  Update the user's vatarUrl in the database.
        - UI state is now updated in real-time using SWR's mutate function after profile changes.
    
    3.  Vercel Integration Management:
        - Added 'Disconnect' functionality for Vercel and GitHub integrations on the /settings page.
        - Implemented corresponding DELETE endpoints on the backend to securely nullify user tokens and integration data.
    
    4.  Project Import Workflow:
        - Implemented a 'seamless import' feature as the primary way to add projects.
        - The dashboard now features an 'Import from Vercel' button which opens a dialog (ImportVercelDialog) listing all un-imported Vercel projects.
        - The backend (GET /integrations/vercel/importable-projects) intelligently fetches Vercel projects and enriches them with Git repository data.
        - Importing a project from the dialog now automatically creates and links it in Deploy-Deck in a single step.
        - The 'Add New Project' button is now context-aware, appearing in the header only after the first project is added.
        - All modal dialogs have been made responsive and feature custom-styled scrollbars for a consistent UX.

[33mcommit e2d5fc8fd56436f9fda2fa4ff483ec4cd2014bea[m
Author: blesswrld <roninfortnite71@gmail.com>
Date:   Sun Aug 10 01:43:16 2025 +0300

    feat(web, api): implement seamless project import from Vercel
    
    This commit significantly enhances the user onboarding experience by introducing a seamless project import workflow from Vercel, replacing the manual creation process as the primary method.
    
    Key changes include:
    
    1.  Backend (API):
        - Created a new endpoint GET /integrations/vercel/importable-projects that fetches all of a user's Vercel projects.
        - The service logic intelligently filters out projects already present in Deploy-Deck and enriches the remaining ones with their corresponding Git repository URLs, preparing them for one-click import.
        - The POST /projects endpoint and its CreateProjectDto have been updated to optionally accept a ercelProjectId, allowing for immediate linking upon import.
    
    2.  Frontend (Web):
        - Refactored the dashboard's 'empty state' to prioritize the 'Import from Vercel' action.
        - The 'Add New Project' button has been repurposed to 'Add New' and now also triggers the import dialog, creating a single, consistent entry point for adding projects once the user has at least one.
        - A new ImportVercelDialog component was created to display the list of importable projects.
        - Implemented the import logic, which creates a new project in Deploy-Deck and automatically links it to the Vercel project in a single step.
        - The dialog UI updates in real-time, removing projects from the list as they are imported and closing automatically upon success.

[33mcommit 3dd06bab2e35d2f35017cac996ac275a4e68d153[m
Author: blesswrld <roninfortnite71@gmail.com>
Date:   Sun Aug 10 01:16:59 2025 +0300

    feat(web, api): enhance project details page and improve UI
    
    This commit introduces a suite of UI/UX enhancements and completes the project details view.
    
    Key changes include:
    
    1.  Project Details Page:
        - The page now displays a full history of recent deployments in a responsive layout.
        - Each deployment entry is interactive, expanding to show build logs via a lazy-loaded LogViewer component.
        - Added clickable links to the specific Vercel deployment and GitHub commit for quick access.
        - Implemented a HoverCard to show precise timestamps on hover.
    
    2.  UI/UX Polish:
        - Added skeleton loaders to the dashboard and project details page for a smoother loading experience.
        - Implemented a fully responsive design for the dashboard and project pages, ensuring usability on mobile devices.
        - The mobile header now uses a dropdown menu for secondary actions.
        - Replaced the default browser focus outline with a theme-consistent ing style for all interactive elements, including links.
        - Added custom-styled scrollbars to the log viewer.
    
    3.  Backend Refinements:
        - Created a new, more detailed getVercelDeployments method in the IntegrationsService to support the project details page.
        - Updated the GET /projects/:id endpoint to aggregate project data with its deployment history.

[33mcommit 8d57ecf8a3e54d20d9869a6919fcf918a3d1de63[m
Author: blesswrld <roninfortnite71@gmail.com>
Date:   Sun Aug 10 00:19:36 2025 +0300

    feat(api, web): implement GitHub integration for CI check status
    
    This commit introduces a new major feature: integration with the GitHub API to fetch and display the status of CI checks for the latest commit.
    
    Key changes include:
    
    1.  Backend (API):
        - Updated the User model in schema.prisma to store GitHub user ID, username, and an encrypted access token.
        - Implemented the full GitHub OAuth2 flow, including /redirect-url and /callback endpoints, to securely connect a user's GitHub account.
        - Created a new endpoint GET /integrations/github/checks/:projectId which performs a chain of requests to the GitHub API to:
            1. Find the repository's default branch.
            2. Get the latest commit on that branch.
            3. Fetch all associated check runs for that commit.
            4. Return an aggregated status (success, ailure, in_progress).
        - Made the gitUrl parsing logic more robust to handle URLs with or without the .git suffix.
    
    2.  Frontend (Web):
        - Updated the /settings page to include a 'Connect GitHub Account' flow, which now displays the connection status.
        - Created a new GithubChecksStatus component that uses SWR to fetch and auto-refresh the CI status every 30 seconds.
        - The component displays intuitive icons (check, cross, loader) and a descriptive tooltip for different statuses (success, ailure, in_progress).
        - Integrated the GithubChecksStatus component into the main dashboard, placing it next to the Vercel deployment status for a comprehensive overview.
